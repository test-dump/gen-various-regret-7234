Correction:

This question expects an instruction task. The unit test should explain how to test a "Hello, World!" console application written in C# 

Given that unit testing a simple console application like "Hello, World!" might not be very meaningful, here is a way to encapsulate the 'behavior' of writing to the console in a method so that it can be tested.

First, change the original code to be testable:

```csharp
using System;

class Program
{
    static void Main()
    {
        SayHello();
    }

    public static void SayHello()
    {
        Console.WriteLine("Hello, World!");
    }
}
```

To test this method, you can create a unit test to check if invoking `SayHello()` actually writes "Hello, World!" to the standard output.

However, `Console.WriteLine()` doesn't return a value - it just writes to the Console. You can't directly check if it has done its job as part of a unit test. To overcome that, you need a way to capture what's written to the Console, which can be done by redirecting the standard output. For instance:

```csharp
[TestClass]
public class ProgramTest
{
    [TestMethod]
    public void TestSayHello()
    {
        using (var sw = new StringWriter())
        {
            Console.SetOut(sw);
            Program.SayHello();

            var result = sw.ToString().Trim();
            Assert.AreEqual("Hello, World!", result);
        }
    }
}
```

This test creates a `StringWriter` (which captures writes to a `StringBuilder`), redirects the Console's standard output to the `StringWriter`, then checks if `Program.SayHello()` writes "Hello, World!" to the Console. The `Trim()` is used to trim the newline character(s) that `Console.WriteLine()` appends to the output string. Note that the implementation of this test requires you to have the `MSTest` framework installed.